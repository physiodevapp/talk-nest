<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <title>Physiodevapp Chat</title>
  <script defer>
    document.addEventListener('DOMContentLoaded', () => {
      const menuButton = document.getElementById('menuButton');
      const menu = document.getElementById('menu');

      if (!menuButton || !menu) {
        console.error('menuButton or menu not found in the DOM');
        return;
      }

      menuButton.addEventListener('click', () => {
        const isHidden = menu.classList.contains('hidden');
        if (isHidden) {
          menu.classList.remove('hidden');
          menu.classList.remove('scale-95');
          menu.classList.add('scale-100');
        } else {
          menu.classList.add('hidden');
          menu.classList.remove('scale-100');
          menu.classList.add('scale-95');
        }
      });

      document.addEventListener('click', (event) => {
        if (!menu.contains(event.target) && !menuButton.contains(event.target)) {
          menu.classList.add('hidden');
          menu.classList.remove('scale-100');
          menu.classList.add('scale-95');
        }
      });
    });
  </script>
  <script>
    const currentUser = JSON.parse('<%- JSON.stringify(currentUser) %>');
  </script>
  <script type="module">
    import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";
    import { ulid } from "https://unpkg.com/ulid@2.3.0/dist/index.js";

    let formSubmitHandler;

    const form = document.getElementById("chat-form");
    const input = document.getElementById("input");
    const messages = document.getElementById("messages");
    let lastSenderId = null;

    const openDB = () => {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open("ChatDB", 1);

        request.onupgradeneeded = (event) => {
          const db = event.target.result;
          const objectStore = db.createObjectStore("messages", { keyPath: "id" });
          objectStore.createIndex("status", "status", { unique: false });
        };

        request.onsuccess = (event) => resolve(event.target.result);
        request.onerror = (event) => reject(event.target.error);
      });
    };

    const saveMessage = async (messageULID, message) => {
      const db = await openDB();
      const transaction = db.transaction("messages", "readwrite");
      const store = transaction.objectStore("messages");

      const data = {
        id: messageULID,
        content: message,
        status: "pending",
      };

      store.add(data);
      transaction.oncomplete = () => {
        console.log("Mensaje guardado en IndexedDB");
      };
      transaction.onerror = () => {
        console.error("Error al guardar el mensaje, aÃ±adiendo a la cola de reintento");
        retryQueue.push(data);
        retrySaveMessage();
      };
    };

    const retrySaveMessage = async () => {
      while (retryQueue.length > 0) {
        const db = await openDB();
        const transaction = db.transaction("messages", "readwrite");
        const store = transaction.objectStore("messages");

        const message = retryQueue.shift();

        try {
          store.add(message);
          transaction.oncomplete = () => {
            console.log(`Reintento exitoso: Mensaje ${message.id} guardado`);
          };
        } catch (error) {
          console.error(`Reintento fallido para el mensaje ${message.id}, reinsertando en la cola`);
          retryQueue.push(message);
          break;
        }
      }

      if (retryQueue.length > 0) {
        setTimeout(retrySaveMessage, 5000);
      }
    };

    const messageExists = async (id) => {
      const db = await openDB();
      const transaction = db.transaction("messages", "readonly");
      const store = transaction.objectStore("messages");

      const request = await store.get(id);
      return new Promise((resolve, reject) => {
        const request = store.get(id);

        request.onsuccess = () => {
          resolve(!!request.result);
        };

        request.onerror = () => {
          console.error('Error al buscar el mensaje:', request.error);
          reject(request.error);
        };
      });
    };

    const resendPendingMessages = async (socket) => {
      const db = await openDB();
      const transaction = db.transaction("messages", "readonly");
      const store = transaction.objectStore("messages");
      const index = store.index("status");

      const pendingMessages = [];
      index.openCursor("pending").onsuccess = (event) => {
        const cursor = event.target.result;
        if (cursor) {
          pendingMessages.push(cursor.value);
          cursor.continue();
        } else {
          console.log("Mensajes pendientes encontrados:", pendingMessages);

          pendingMessages.forEach(async (message) => {
            try {
              socket.emit("chat message", message.content, message.id);
            } catch (error) {
              console.error("Error al reenviar mensaje:", message.id);
            }
          });
        }
      };
    };

    const deleteMessage = async (id) => {
      const db = await openDB();
      const transaction = db.transaction("messages", "readwrite");
      const store = transaction.objectStore("messages");

      store.delete(id);
      console.log(`Mensaje ${id} eliminado de IndexedDB`);
    };

    const handleFormSubmit = (socket) => (event) => {
      event.preventDefault();

      const message = input.value.trim();

      if (!message) return;

      const messageULID = ulid();
      const isFirstInChain = lastSenderId !== currentUser.id;
      addMessageToUI(message, messageULID, true, true, currentUser.id);
      lastSenderId = currentUser.id;

      saveMessage(messageULID, message);

      if (socket.connected) {
        socket.emit("chat message", message, messageULID);
      }

      input.value = '';
    };

    const resetFormAndMessages = (socket) => {
      if (formSubmitHandler) {
        form.removeEventListener("submit", formSubmitHandler);
      }
      formSubmitHandler = handleFormSubmit(socket);
      form.addEventListener("submit", formSubmitHandler);

      messages.replaceChildren();
    };

    const addMessageToUI = (message, messageULID, isCurrentUser, isLocal, userId) => {
      let item = document.getElementById(messageULID);

      if (item) return;

      const children = Array.from(messages.children);

      const insertBeforeItem = children.find((child) =>
        child.id.localeCompare(messageULID) > 0
      );

      const previousItem = insertBeforeItem
        ? insertBeforeItem.previousElementSibling
        : children[children.length - 1];

      console.log('previousItem -> ', previousItem);
      console.log('userId -> ', userId);
      const isFirstInChain =
        !previousItem || previousItem.dataset.userId !== userId;

      const itemHTML = `
        <li 
          id="${messageULID}" 
          data-user-id="${userId}" 
          class="${(isCurrentUser && isLocal) ? 'local-message' : 'remote-message'} 
            relative p-3 rounded-md 
            ${isCurrentUser ? 'bg-[#d9ffdb]' : 'bg-[#f3f4f6]'}
            ${isCurrentUser ? 'mr-[0.2em] ml-[4em]' : 'mr-[4em] ml-[0.2em]'}
            ${isFirstInChain ? 'mt-[1.2em]' : 'mt-[0.4em]'}">
          ${isFirstInChain ?
                `<svg xmlns="http://www.w3.org/2000/svg" class="absolute top-0 ${isCurrentUser ? 'right-0 translate-x-2' : 'left-0 -translate-x-2'}" width="20" height="20" viewBox="0 0 20 20">
              <path d="${isCurrentUser ? 'M0 0 L0 20 L20 0 Z' : 'M20 20 L20 0 L0 0 Z'}" fill="${isCurrentUser ? '#d9ffdb' : '#f3f4f6'}"></path>
            </svg>`
                : ''}
          <p class="content text-gray-800">${message}</p>
        </li>`;

      const template = document.createElement('template');
      template.innerHTML = itemHTML.trim();
      item = template.content.firstChild;

      if (insertBeforeItem) {
        messages.insertBefore(item, insertBeforeItem);
      } else {
        messages.appendChild(item);
      }

      messages.scrollTop = messages.scrollHeight;
    };

    const updateMessageInUI = (newMessage, messageULID) => {
      const item = document.getElementById(messageULID);

      if (!item) return;

      item.querySelector('.content').textContent = newMessage;

      item.classList.remove('local-message');
      item.classList.add('remote-message');
    };

    const handleTokenRefresh = async (socket) => {
      const refreshed = await refreshAccessToken();

      if (!refreshed) {
        window.location.href = '/access';
      }
    };

    const refreshAccessToken = async () => {
      try {
        const response = await fetch("/refresh", {
          method: "POST",
          credentials: "include",
        });

        if (response.ok) {
          return true;
        } else {
          return false;
        }
      } catch (error) {
        console.error('Trying to renew the token failed');

        return false;
      }
    };

    const connectToSocket = async () => {
      const socket = io({
        auth: {
          token: "USE_COOKIE",
          serverOffset: 0,
        }
      });

      console.log('--> client -> on connectToSocket (NEW)');

      if (socket) {
        await resetFormAndMessages(socket);
      }

      socket.on("chat message", async (message, messageULID, user, messageId) => {
        console.log('--> client -> on chat message : ', message);
        let isInLocalStore;
        const isCurrentUser = user?.id === currentUser.id;

        try {
          isInLocalStore = await messageExists(messageULID);
        } catch (error) {
          isInLocalStore = false;
        }
        const isMessageRendered = isCurrentUser && isInLocalStore;

        if (!isMessageRendered) {
          addMessageToUI(message, messageULID, isCurrentUser, false, user?.id);
        } else {
          await deleteMessage(messageULID);

          updateMessageInUI(message, messageULID);
        }

        socket.auth.serverOffset = messageId;
      });

      socket.on("connect", async () => {
        console.info('--> client on connect');
        await resendPendingMessages(socket);
      });

      socket.on("connect_error", async (error) => {
        if (['Invalid token', 'Token required', 'Token expired'].includes(error.message)) {
          console.info('--> client on connect_error -> Trying to renew the token...', error.message);
          await handleTokenRefresh(socket);
        }
      });

      socket.on("auth_error", async (error) => {
        console.info('--> client auth_error -> Trying to renew the token...', error);
        socket.disconnect();

        await handleTokenRefresh(socket);

        socket.connect();
      });

      socket.on('db_error', async (error) => {
        if (['Message duplicated'].includes(error.message)) {
          socket.disconnect();

          await deleteMessage(error.messageULID);

          socket.connect();
        }
      });
    };

    connectToSocket();
  </script>
</head>
<body class="bg-[url('/images/watercolor-background.jpg')] flex items-center justify-center min-h-screen">

  <!-- Main Mobile Container -->
  <div class="w-full h-screen bg-white sm:w-[320px] sm:h-[700px] sm:rounded-[40px] sm:border-8 sm:border-gray-900 sm:shadow-lg sm:drop-shadow-[0_35px_25px_rgba(0,0,0,0.25)] relative">

    <!-- Notch -->
    <div class="hidden sm:block absolute top-0 left-1/2 -translate-x-1/2 w-28 h-4 bg-black rounded-b-[20px]"></div>

    <!-- Chat Header -->
    <header class="relative bg-[#8b45f7] text-white p-4 sm:rounded-t-[30px] flex justify-between items-center">
      <div class="flex items-center space-x-2">
        <div class="rounded-full bg-gray-300 h-8 w-8"></div>
        <h1 class="text-lg font-semibold"><%= currentUser.username %></h1>
      </div>
      <button id="menuButton">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v.01M12 12v.01M12 18v.01" />
        </svg>
      </button>
      <div id="menu"
        class="hidden absolute right-4 top-[2.8rem] w-48 bg-white rounded shadow-lg transform scale-95 transition-transform z-10">
        <a href="/profile" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 rounded">Profile</a>
        <form action="/logout" method="POST">
          <button type="submit" class="block w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 rounded">
            Logout
          </button>
        </form>
      </div>
    </header>

    <!-- Chat Section -->
    <main class="h-[calc(100%-8rem)] overflow-y-auto py-4 chat">
      <ul id="messages" class="list-none m-0 px-4 overflow-y-auto"></ul>
    </main>

    <!-- Chat Input -->
    <form id="chat-form" class="absolute bottom-0 left-0 w-full bg-gray-200 p-3 flex space-x-2 sm:rounded-b-[30px]">
      <input id="input" type="text" name="message" autocomplete="off" placeholder="Escribe un mensaje"
        class="flex-1 p-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-[#8b45f7] outline-none" />
      <button type="submit" class="bg-[#8b45f7] text-white p-2 rounded-full">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </form>

  </div>

</body>

</html>