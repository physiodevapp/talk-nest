<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <title>Physiodevapp Chat</title>
  <script defer>
    document.addEventListener('DOMContentLoaded', () => {
      const menuButton = document.getElementById('menuButton');
      const menu = document.getElementById('menu');

      if (!menuButton || !menu) {
        console.error('menuButton or menu not found in the DOM');
        return;
      }

      menuButton.addEventListener('click', () => {
        const isHidden = menu.classList.contains('hidden');
        if (isHidden) {
          menu.classList.remove('hidden');
          menu.classList.remove('scale-95');
          menu.classList.add('scale-100');
        } else {
          menu.classList.add('hidden');
          menu.classList.remove('scale-100');
          menu.classList.add('scale-95');
        }
      });

      document.addEventListener('click', (event) => {
        if (!menu.contains(event.target) && !menuButton.contains(event.target)) {
          menu.classList.add('hidden');
          menu.classList.remove('scale-100');
          menu.classList.add('scale-95');
        }
      });
    });
  </script>
  <script>
    const currentUser = JSON.parse('<%- JSON.stringify(currentUser) %>');
  </script>
  <script type="module">
    // import { io } from "https://cdn.socket.io/4.3.2/socket.io.esm.min.js";
    import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";

    let formSubmitHandler;

    const form = document.getElementById("chat-form");
    const input = document.getElementById("input");
    const messages = document.getElementById("messages");
    const localSelfRenderedMessages = new Map();
    let lastSenderId = null;

    const generateUniqueId = () => `msg_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;

    const handleFormSubmit = (socket) => (event) => {
      event.preventDefault();

      const message = input.value.trim();

      if (!message) return;

      const tempId = generateUniqueId();
      const isFirstInChain = lastSenderId !== currentUser.id;
      addMessageToUI(message, tempId, true, true, isFirstInChain);
      lastSenderId = currentUser.id;

      localSelfRenderedMessages.set(tempId, message);

      console.log('-- client -> on handleFormSubmit socket connected ? ', socket.connected);
      if (socket.connected) {
        socket.emit("chat message", message, tempId);
      } else {
        const storedPendingMessages = JSON.parse(localStorage.getItem("storedPendingMessages")) || [];

        storedPendingMessages.push([tempId, message]);

        localStorage.setItem("storedPendingMessages", JSON.stringify(storedPendingMessages));
      }

      input.value = '';
    };

    const resetFormAndMessages = (socket) => {
      if (socket) {
        if (formSubmitHandler) {
          form.removeEventListener("submit", formSubmitHandler);
        }
        formSubmitHandler = handleFormSubmit(socket);
        form.addEventListener("submit", formSubmitHandler);

        messages.replaceChildren();
      }
    };

    const addMessageToUI = (message, messageId, isCurrentUser, isLocal, isFirstInChain) => {
      let item = document.getElementById(messageId);

      if (item) return;

      if (isCurrentUser) {
        item = `
          <li id=${messageId} class="${isLocal ? 'local-message ' : ''}relative bg-[#d9ffdb] p-3 rounded-md self-end m-[0.2em_0_0.2em_4em]${isFirstInChain ? ' gap' : ''}">
            ${isFirstInChain ?
            `<svg xmlns="http://www.w3.org/2000/svg" class="absolute top-0 right-0 translate-x-2" width="20" height="20"
              viewBox="0 0 20 20">
              <path d="M0 0 L0 20 L20 0 Z" fill="#d9ffdb"></path>
            </svg>`
            : ''}
            <p class="content text-gray-800">${message}</p>
          </li>
        `;
      } else {
        item = `
          <li id=${messageId} class="${!isLocal ? 'remote-message ' : ''}relative bg-[#f3f4f6] p-3 rounded-md m-[0.2em_4em_0.2em_0em]${isFirstInChain ? ' gap' : ''}"}">
            ${isFirstInChain ?
            `<svg xmlns="http://www.w3.org/2000/svg" class="absolute top-0 left-0 -translate-x-2" width="20" height="20"
              viewBox="0 0 20 20">
              <path d="M20 20 L20 0 L0 0 Z" fill="#f3f4f6"></path>
            </svg>`
            : ''}
            <p class="text-gray-800">${message}</p>
          </li>
        `;
      }

      messages.insertAdjacentHTML("beforeend", item);

      messages.scrollTop = messages.scrollHeight;
    };

    const updateMessageInUI = (newMessage, tempId, messageId) => {
      const item = document.getElementById(tempId);

      if (!item) return;

      item.querySelector('.content').textContent = newMessage;

      item.setAttribute("id", messageId);

      item.classList.remove('local-message');
    };

    const disconnectSocketSafely = (socket) => {
      if (socket.connected) {
        socket.disconnect();
      }
    };

    const reconnectSocketSafely = (socket) => {
      if (!socket.connected) {
        socket.connect();
      }
    };

    const handleTokenRefresh = async (socket, shouldAutoReconnect = true) => {
      if (!shouldAutoReconnect) {
        disconnectSocketSafely(socket);
      }

      const refreshed = await refreshAccessToken();

      if (refreshed) {
        console.log('token renewed successfully');
        if (!shouldAutoReconnect) {
          reconnectSocketSafely(socket);
        }
      } else {
        window.location.href = '/access';
      }
    };

    const refreshAccessToken = async () => {
      try {
        const response = await fetch("/refresh", {
          method: "POST",
          credentials: "include",
        });

        if (response.ok) {
          return true;
        } else {
          return false;
        }
      } catch (error) {
        console.error('Trying to renew the token failed');

        return false;
      }
    };

    const connectToSocket = () => {
      const socket = io({
        auth: {
          token: "USE_COOKIE",
          serverOffset: 0,
        }
      });

      console.log('-- client -> on connectToSocket (NEW)', localSelfRenderedMessages);

      socket.off("chat message");
      socket.off("connect_error");
      socket.off("connect");
      socket.off("disconnect");
      socket.off("auth_error");

      resetFormAndMessages(socket);

      socket.on("chat message", (message, messageId, user, tempId = null) => {
        const isCurrentUser = user?.id === currentUser.id;
        const isLocalMessage = tempId && localSelfRenderedMessages.has(tempId);
        const isMessageRendered = isCurrentUser && isLocalMessage;
        console.log('-- client -> on chat message : ', message, ' -> ', messageId, '-> is message rendered ? ', isMessageRendered);

        if (!isMessageRendered) {
          const isFirstInChain = (lastSenderId !== user?.id);
          addMessageToUI(message, messageId, isCurrentUser, false, isFirstInChain);

          lastSenderId = user?.id;
        } else {
          localSelfRenderedMessages.delete(tempId);

          updateMessageInUI(message, tempId, messageId);
        }

        socket.auth.serverOffset = messageId;
      });

      socket.on("connect", () => {
        let storedPendingMessages = JSON.parse(localStorage.getItem("storedPendingMessages")) || [];
        const remainingMessages = [];
        console.log('-- client -> on connect storedPendingMessages ?', storedPendingMessages);
        console.log('-- client -> on connect socket recovered ?', socket.recovered);

        storedPendingMessages.forEach((message) => {
          socket.emit("chat message", message[1], message[0], () => { }, () => {
            remainingMessages.push(message);
          });
        });

        storedPendingMessages = remainingMessages;

        localStorage.setItem("storedPendingMessages", JSON.stringify(storedPendingMessages));
      });

      socket.on("disconnect", () => {
        const storedPendingMessages = JSON.parse(localStorage.getItem("storedPendingMessages")) || [];
        const existingTempIds = new Set(storedPendingMessages.map(([tempId]) => tempId));

        localSelfRenderedMessages.forEach(([tempId, message]) => {
          if (!existingTempIds.has(tempId)) {
            storedPendingMessages.push([tempId, message]);
            existingTempIds.add(tempId);
          }
        });
        // storedPendingMessages.push(...localSelfRenderedMessages);
        console.log('-- client -> on disconnect', storedPendingMessages);

        localStorage.setItem("storedPendingMessages", JSON.stringify(storedPendingMessages));
      });

      socket.on("connect_error", async (error) => {
        if (['Invalid token', 'Token required', 'Token expired'].includes(error.message)) {
          console.info('-- client connect_error -> Trying to renew the token...', error.message);
          await handleTokenRefresh(socket, false);
        }
      });

      socket.on("auth_error", async (error) => {
        console.info('-- client auth_error -> Trying to renew the token...', error);
        await handleTokenRefresh(socket, false);
      });
    };

    connectToSocket();
  </script>
</head>

<body class="bg-gray-100 font-sans h-screen">
  <div class="chat max-w-md mx-auto bg-white shadow-lg h-full">
    <!-- Header -->
    <header class="relative bg-[#8b45f7] text-white p-4 flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <div class="rounded-full bg-gray-300 h-8 w-8"></div>
        <h1 class="text-lg font-semibold">
          <%= currentUser.username %>
        </h1>
      </div>
      <button id="menuButton">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v.01M12 12v.01M12 18v.01" />
        </svg>
      </button>
      <div id="menu"
        class="hidden absolute right-6 top-[3em] w-48 bg-white rounded shadow-lg transition-transform duration-300 transform origin-top-right scale-95">
        <a href="/profile" class="block px-4 py-2 text-gray-700 rounded hover:bg-gray-100">Profile</a>
        <form action="/logout" method="POST" class="block">
          <button type="submit" class="w-full text-left px-4 py-2 text-gray-700 rounded hover:bg-gray-100">
            Logout
          </button>
        </form>
      </div>
    </header>

    <!-- Chat Section -->
    <main class="h-[calc(100%-4rem)]">
      <form id="chat-form" class="pb-[4em] flex flex-col space-y-4 overflow-y-auto h-full">
        <ul id="messages" class="list-none m-0 pb-12 p-0 px-4 overflow-y-scroll h-full scroll-smooth"></ul>

        <!-- Input Section -->
        <div class="absolute bottom-0 w-full left-0 bg-gray-200 p-3 flex items-center space-x-2">
          <input id="input" type="text" name="message" autocomplete="off" placeholder="Escribe un mensaje"
            class="flex-1 p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#075e54]" />
          <button type="submit" class="bg-[#8b45f7] text-white p-2 rounded-full">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
              stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </form>
    </main>
  </div>
</body>

</html>